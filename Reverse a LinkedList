//Leetcode Solution

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if(!head || !head->next) return head;

        ListNode *ptr1= head, *ptr2= head->next, *ptr3= ptr2->next;
        while(ptr2)
        {
            ptr2->next= ptr1;
            ptr1= ptr2;
            ptr2= ptr3;
            if(ptr3) ptr3= ptr3->next;
        }

        head->next= NULL;
        return ptr1;
    }
};


//coding Ninjas studio solution

#include <bits/stdc++.h>

/****************************************************************

    Following is the class structure of the LinkedListNode class:

    template <typename T>
    class LinkedListNode
    {
    public:
        T data;
        LinkedListNode<T> *next;
        LinkedListNode(T data)
        {
            this->data = data;
            this->next = NULL;
        }
    };

*****************************************************************/

LinkedListNode<int> *reverseLinkedList(LinkedListNode<int> *head) 
{
    // Write your code here
    if(!head || !head->next) return head;

    LinkedListNode<int> *ptr1= head, *ptr2= head->next, *ptr3= ptr2->next;
    while(ptr2)
    {
        ptr2->next= ptr1;
        ptr1= ptr2;
        ptr2= ptr3;
        if(ptr3) ptr3= ptr3->next;
    }

    head->next= NULL;
    return ptr1;
}
