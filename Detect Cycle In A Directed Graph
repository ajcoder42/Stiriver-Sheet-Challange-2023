//coding ninjas studio solution

bool dfs(int node, vector<int> adj[], vector<int> &vis, vector<int> &pathVis)
{
  vis[node]= 1;
  pathVis[node]= 1;
  for(auto i: adj[node])
  {
    if(!vis[i])
    {
      if(dfs(i, adj, vis, pathVis)) return true;
    }
    else if(pathVis[i]) return true;
  }
  pathVis[node]= 0;
  return false;
}

int detectCycleInDirectedGraph(int n, vector < pair < int, int >> & edges) {
  // Write your code here.
  vector<int> adj[n+1];
  for(auto e: edges)
  {
    int u= e.first;
    int v= e.second;
    adj[u].push_back(v);
  }
  vector<int> vis(n+1, 0);
  vector<int> pathVis(n+1, 0);
  for(int i=0; i<=n; i++)
  {
    if(!vis[i])
    {
      if(dfs(i, adj, vis, pathVis)) return true;
    }
  }
  
  return false;
}
