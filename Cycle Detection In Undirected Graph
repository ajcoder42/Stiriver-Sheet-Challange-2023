//coding ninjas studio solutions

bool dfs(int node, int source, vector<int> adj[], vector<int> &vis)
{
    vis[node]= 1;
    for(auto i: adj[node])
    {
        if(!vis[i])
        {
            if(dfs(i, node, adj, vis)) return true;
        }
        else
        {
            if(i != source) return true;
        }
    }
    return false;
}


string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
    // Write your code here.
    vector<int> adj[n+1];
    for(auto e: edges)
    {
        int u= e[0];
        int v= e[1];
        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    vector<int> vis(n+1, 0);
    for(int i=1; i<=n; i++)
    {
        if(!vis[i])
        {
            if(dfs(i, -1, adj, vis)) return "Yes";
        }
    }
    return "No";
}
