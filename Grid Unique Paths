// Coding Ninjas Studio Solution

#include <bits/stdc++.h> 

// int f(int row, int col, vector<vector<int>> &dp)
// {
// 	if(row==0 && col==0) return 1;
// 	if(row<0 || col<0) return 0;
// 	if(dp[row][col]!= -1) return dp[row][col];
// 	return dp[row][col]= f(row-1, col, dp) + f(row, col-1, dp);
// }


int uniquePaths(int m, int n) {
	// Write your code here.
  /*********Recursion + memoization**********/
    // vector<vector<int>> dp(m, vector<int>(n,-1));
	// return f(m-1, n-1, dp);

/**********Tabulation***********/
    // vector<vector<int>> dp(m, vector<int>(n,0));
    // dp[0][0]= 1;
	// for(int row=0; row<m; row++)
	// {
	// 	for(int col=0; col<n; col++)
	// 	{
	// 		if(row>0) dp[row][col] += dp[row-1][col];
	// 		if(col>0) dp[row][col] += dp[row][col-1];
	// 	}
	// }
	// return dp[m-1][n-1];

/*************Space Optimization**************/
    vector<int> prev(n,0);
	for(int row=0; row<m; row++)
	{
		vector<int> cur(n,0);
		for(int col=0; col<n; col++)
		{
			if(row==0 && col==0) cur[0]= 1;
			if(row>0) cur[col] += prev[col];
			if(col>0) cur[col] += cur[col-1];
		}
		prev= cur;
	}
	return prev[n-1];
}


//Leetcode Solution

class Solution {
public:
    int uniquePaths(int m, int n) {
        int N= m + n -2;
        int r= m-1;
        double ans =1 ;
        for(int i=1; i<=r; i++)
        {
            ans= ans*(N-r+i)/i;
        }
        return (int)ans;
    }
};
