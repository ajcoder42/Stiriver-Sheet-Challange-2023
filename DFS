vector<int> dfs(int node, vector<int> adj[], vector<int> &vis, vector<int> &temp)
{
    vis[node]= 1;
    temp.push_back(node);
    for(auto i: adj[node])
    {
        if(!vis[i])
        {
            dfs(i, adj, vis, temp);
        }
    }
    return temp;
}


vector<vector<int>> depthFirstSearch(int V, int E, vector<vector<int>> &edges)
{
    // Write your code here

    vector<vector<int>> ans;
    vector<int> adj[V];
    for(int i=0; i<E; i++)
    {
        adj[edges[i][0]].push_back(edges[i][1]);
        adj[edges[i][1]].push_back(edges[i][0]);
    }
   
    vector<int> vis(V, 0);
    for(int i=0; i<V; i++)
    {
        vector<int> temp;
        if(!vis[i])
        {
            dfs(i, adj, vis, temp);
            ans.push_back(temp);
        }
    }

    return ans;
}
