//Coding Ninjas Studio solutions

#include <bits/stdc++.h>

vector<int> majorityElementII(vector<int> &arr)
{
    // Write your code here.
    //Brute Force - O(n^2)
    // int n= arr.size();
    // if(n<=2) return arr;
    // vector<int> ans;
    // for(int i=0; i<n-1; i++)
    // {
    //     int cnt= 0;
    //     if(ans.size()==0 || ans[0]!=arr[i])
    //     {
    //         for(int j=0; j<n; j++)
    //         {
    //             if(arr[i]==arr[j]) cnt++;
    //             if (cnt > n / 3) 
    //             {
    //                 ans.push_back(arr[i]);
    //                 break;
    //             }
    //         }
    //     }
    //     if(ans.size()==2) break;
    // }

    // return ans;

    //By Using Map - O(n*log(n))
    // int n= arr.size();
    // vector<int> ans;
    // unordered_map<int,int> M;
    // for(int i=0; i<n; i++)
    // {
    //     M[arr[i]]++;
    //     if(M[arr[i]] == n/3 + 1) ans.push_back(arr[i]);
    // }
    // return ans;

    //By Using Moore's Voting modified algorithm - O(n)
    int n= arr.size();
    vector<int> ans;
    int cnt1= 0, cnt2= 0, element1, element2;
    for(int i=0; i<n; i++)
    {
        if(cnt1==0 && element2 != arr[i])
        {
            cnt1++;
            element1= arr[i];
        }
        else if(cnt2==0 && element1 != arr[i])
        {
            cnt2++;
            element2= arr[i];
        }
        else if(arr[i] == element1) cnt1++;
        else if(arr[i] == element2) cnt2++;
        else 
        {
            cnt1--;
            cnt2--;
        }
    }

    cnt1= 0;
    cnt2= 0;
    for(int i=0; i<n; i++)
    {
        if(arr[i] == element1) cnt1++;
        if(arr[i] == element2) cnt2++;
    }
    if(cnt1 > n/3) ans.push_back(element1);
    if(cnt2 > n/3) ans.push_back(element2);
    return ans;
}
