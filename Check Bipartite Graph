// coding ninjas studio solution

bool dfs(int node, vector<int> adj[], vector<int> color, int c)
{
	color[node]= c;
	for(auto i: adj[node])
	{
		if(color[i]==-1)
		{
			if(!dfs(i, adj, color, !c)) return false;
		}
		else if(color[i]==color[node]) return false;
	}
	return true;
}

bool isGraphBirpatite(vector<vector<int>> &edges) {
	// Write your code here.
	int n= edges.size();
	vector<int> adj[n];
	for(int i=0; i<n; i++)
	{
		for(int j=0; j<n; j++)
		{
			if(edges[i][j]==1)
			{
				adj[i].push_back(j);
				adj[j].push_back(i);
			}
		}
	}
    
	vector<int> color(n, -1);

	for(int i=0; i<n; i++)
	{
		if(color[i]==-1)
		{
			if(!dfs(i, adj, color, 0)) return false;
		}	
	}
	return true;
}
